<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd  
						http://www.springframework.org/schema/beans  
						http://www.springframework.org/schema/beans/spring-beans.xsd  
						http://www.springframework.org/schema/tx  
						http://www.springframework.org/schema/tx/spring-tx.xsd  
						http://www.springframework.org/schema/jdbc  
						http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd  
						http://www.springframework.org/schema/cache  
						http://www.springframework.org/schema/cache/spring-cache-4.2.xsd  
						http://www.springframework.org/schema/aop  
						http://www.springframework.org/schema/aop/spring-aop.xsd  
						http://www.springframework.org/schema/util  
						http://www.springframework.org/schema/util/spring-util.xsd
						http://camel.apache.org/schema/spring
						http://camel.apache.org/schema/spring/camel-spring-2.17.2.xsd">

    <camel:routeContext id="Routing-SystemAccount-Module" xmlns="http://camel.apache.org/schema/spring">
        <camel:route>
            <camel:from uri="direct:createPrincipalAndCredential" />
            <camel:setHeader headerName="originalParameters">
                <camel:simple>${body}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="agency">
              	<camel:simple>${body[0].agency}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="loginName">
              	<camel:simple>${body[0].loginName}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="groupIds">
              	 <camel:simple>${body[0].groupIds}</camel:simple>
            </camel:setHeader>
            <camel:multicast parallelProcessing="true" stopOnException="true">
                <camel:bean ref="systemAccountDAO" method="createPrincipal(${body[0]})" />
                <camel:bean ref="systemAccountDAO" method="createCredential(${body[1]})" />
                <camel:filter>
                	<camel:simple>${header.groupIds} != null</camel:simple>
                	<camel:setHeader headerName="groupIdLoopSize">
               			<camel:simple>${header.groupIds.size}</camel:simple>
           			</camel:setHeader>
                	<camel:loop>
                		<camel:header>groupIdLoopSize</camel:header>
                		<camel:setHeader headerName="currentGroupId">
                   			<camel:simple>${header.groupIds.get(${exchangeProperty.CamelLoopIndex})}</camel:simple>
              			</camel:setHeader>
		                <camel:bean ref="systemAccountDAO" method="createRelationshipWithGroup(${header.agency}, ${header.loginName}, ${header.currentGroupId})" />
                	</camel:loop>
                </camel:filter>
            </camel:multicast>
            <camel:setBody>
                <camel:simple>${header.originalParameters}</camel:simple>
            </camel:setBody>
        </camel:route>
        
        <camel:route>
        	<camel:from uri="direct:getPrincipal"/>
        	<camel:setHeader headerName="agency">
        		<camel:simple>${body[0]}</camel:simple>
        	</camel:setHeader>
        	<camel:setHeader headerName="loginName">
				<camel:simple>${body[1]}</camel:simple>        		
        	</camel:setHeader>
        	<camel:bean ref="systemAccountDAO" method="getPrincipal(${header.agency}, ${header.loginName})"/>
        	<camel:setHeader headerName="principal">
        		<camel:simple>${body}</camel:simple>
        	</camel:setHeader>
        	<camel:filter>
        		<camel:simple>${header.principal} != null</camel:simple>
	        	<camel:bean ref="systemAccountDAO" method="getRelationshipWithGroup(${header.agency}, ${header.loginName})"/>
	        	<camel:transform>
	        		<camel:javaScript>request.headers.get('principal').groupIds = request.body</camel:javaScript>
	        	</camel:transform>
        	</camel:filter>
        	<camel:setBody>
        		<camel:simple>${header.principal}</camel:simple>
        	</camel:setBody>
        </camel:route>
        
        <camel:route>
            <camel:from uri="direct:deletePrincipalAndCredential" />
            <camel:multicast parallelProcessing="true" stopOnException="true">
                <camel:bean ref="systemAccountDAO" method="deletePrincipal(${body[0]},${body[1]})" />
                <camel:bean ref="systemAccountDAO" method="deleteCredential(${body[0]},${body[1]})" />
                <camel:bean ref="systemAccountDAO" method="deleteRelationshipWithGroup(${body[0]},${body[1]})"/>
            </camel:multicast>
        </camel:route>

        <camel:route>
            <camel:from uri="direct:deletePrincipalAndCredentialWithReturn"/>
            <camel:to uri="direct:deletePrincipalAndCredential"/>
            <camel:bean ref="systemAccountDAO" method="getAllPrincipals(${body[0]})"/>
        </camel:route>

        <camel:route>
            <camel:from uri="direct:batchDeletePrincipalAndCredentialWithReturn"/>
            <camel:setHeader headerName="agency">
                <camel:simple>${body[0]}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="principals">
                <camel:simple>${body[1]}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="loopSize">
                <camel:simple>${header.principals.length}</camel:simple>
            </camel:setHeader>
            <camel:loop>
                <camel:header>loopSize</camel:header>
                <camel:setHeader headerName="currentPrincipal">
                    <camel:simple>${header.principals[${exchangeProperty.CamelLoopIndex}]}</camel:simple>
                </camel:setHeader>
                <camel:setBody>
                    <camel:javaScript>[request.headers.get('agency'), request.headers.get('currentPrincipal')]</camel:javaScript>
                </camel:setBody>
                <camel:to uri="direct:deletePrincipalAndCredential"/>
            </camel:loop>
            <camel:bean ref="systemAccountDAO" method="getAllPrincipals(${header.agency})"/>
        </camel:route>
        
        <camel:route>
        	<camel:from uri="direct:updatePrincipalAndCredential"/>
        	<camel:setHeader headerName="originalParameters">
                <camel:simple>${body}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="agency">
              	<camel:simple>${body[0].agency}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="loginName">
              	<camel:simple>${body[0].loginName}</camel:simple>
            </camel:setHeader>
            <camel:setHeader headerName="groupIds">
              	 <camel:simple>${body[0].groupIds}</camel:simple>
            </camel:setHeader>
             <camel:multicast parallelProcessing="true" stopOnException="true">
                <camel:bean ref="systemAccountDAO" method="deleteRelationshipWithGroup(${header.agency}, ${header.loginName})"/>
                <camel:bean ref="systemAccountDAO" method="updatePrincipal(${body[0]})" />
                <camel:bean ref="systemAccountDAO" method="updateCredential(${body[1]})" />
            </camel:multicast>
            <camel:filter>
              	<camel:simple>${header.groupIds} != null</camel:simple>
              	<camel:setHeader headerName="groupIdLoopSize">
             			<camel:simple>${header.groupIds.size}</camel:simple>
       			</camel:setHeader>
              	<camel:loop>
              		<camel:header>groupIdLoopSize</camel:header>
              		<camel:setHeader headerName="currentGroupId">
                 			<camel:simple>${header.groupIds.get(${exchangeProperty.CamelLoopIndex})}</camel:simple>
          			</camel:setHeader>
                	<camel:bean ref="systemAccountDAO" method="createRelationshipWithGroup(${header.agency}, ${header.loginName}, ${header.currentGroupId})" />
              	</camel:loop>
            </camel:filter>
            <camel:setBody>
            	<camel:simple>header.originalParameters</camel:simple>
            </camel:setBody>
        </camel:route>
    </camel:routeContext>
</beans>